import requests
import time
from urllib.parse import urlparse

NVD_CVE_API = "https://services.nvd.nist.gov/rest/json/cves/2.0"

def is_valid_url(url: str) -> bool:
    """Check if a URL is valid and has a scheme."""
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except:
        return False

def enrich_with_nvd(cve_id: str, retry_count: int = 3, retry_delay: int = 2) -> dict | None:
    """Fetch CVSS and other details from NVD for a given CVE ID """
    for attempt in range(retry_count):
        try:
            resp = requests.get(NVD_CVE_API, params={"cveId": cve_id}, timeout=10)
            resp.raise_for_status()
            data = resp.json()
            vulns = data.get("vulnerabilities", [])
            if not vulns:
                return None
            
            cve_info = vulns[0].get("cve", {})
            metrics = cve_info.get("metrics", {})

            cvss_data = None
            base_severity = None
            
        
            if "cvssMetricV31" in metrics and metrics["cvssMetricV31"]:
                metric = metrics["cvssMetricV31"][0]
                cvss_data = metric.get("cvssData", {})
                base_severity = metric.get("cvssData", {}).get("baseSeverity")
            elif "cvssMetricV30" in metrics and metrics["cvssMetricV30"]:
                metric = metrics["cvssMetricV30"][0]
                cvss_data = metric.get("cvssData", {})
                base_severity = metric.get("cvssData", {}).get("baseSeverity")
            elif "cvssMetricV2" in metrics and metrics["cvssMetricV2"]:
                metric = metrics["cvssMetricV2"][0]
                cvss_data = metric.get("cvssData", {})
                base_severity = metric.get("baseSeverity")  

            # filter out invalid URLs from references
            valid_references = []
            for ref in cve_info.get("references", []):
                url = ref.get("url")
                if url and is_valid_url(url):
                    valid_references.append(url)

            return {
                "severity": base_severity,
                "cvss_score": cvss_data.get("baseScore") if cvss_data else None,
                "cvss_vector": cvss_data.get("vectorString") if cvss_data else None,
                "nvd_description": next((d["value"] for d in cve_info.get("descriptions", []) if d.get("lang") == "en"), None),
                "nvd_references": valid_references,
            }
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 429 and attempt < retry_count - 1:
                wait_time = retry_delay * (attempt + 1)
                print(f"  ⚠ Rate limited, waiting {wait_time}s before retry...")
                time.sleep(wait_time)
                continue
            print(f"NVD enrichment failed for {cve_id}: {e}")
            return None
        except Exception as e:
            print(f"NVD enrichment failed for {cve_id}: {e}")
            return None
    
    return None

def extract_cve_from_references(references: list) -> str | None:
    """Extract CVE ID from references if present."""
    for ref in references:
        url = ref.get("url", "")
        if "nvd.nist.gov/vuln/detail/CVE-" in url:
            # Extract CVE-XXXX-XXXXX from URL
            parts = url.split("CVE-")
            if len(parts) > 1:
                return "CVE-" + parts[1].split("/")[0].split("?")[0]
    return None

def enrich_with_epss(cve_id: str) -> dict | None:
    """Fetch EPSS probability score for a given CVE ID."""
    try:
        url = f"https://api.first.org/data/v1/epss?cve={cve_id}"
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        epss_data = data.get("data", [])
        if epss_data:
            epss_score = float(epss_data[0].get("epss", 0.0))
            epss_percentile = float(epss_data[0].get("percentile", 0.0))
            return {"epss_score": epss_score, "percentile": epss_percentile}
        return None
    except Exception as e:
        print(f"EPSS enrichment failed for {cve_id}: {e}")
        return None

def check_vulnerabilities(name: str, version: str, purl: str = None) -> list:
    payload = {"package": {"purl": purl}} if purl else {"package": {"name": name}, "version": version}
    try:
        resp = requests.post("https://api.osv.dev/v1/query", json=payload)
        resp.raise_for_status()
        vulns = resp.json().get("vulns", [])

        enriched_vulns = []
        for v in vulns:
            # filter out invalid URLs from OSV references
            valid_refs = []
            for ref in v.get("references", []):
                url = ref.get("url")
                if url and is_valid_url(url):
                    valid_refs.append({"type": ref.get("type"), "url": url})
            
            vuln_obj = {
                "id": v.get("id"),
                "summary": v.get("summary"),
                "details": v.get("details"),
                "severity": None,
                "cvss_score": None,
                "cvss_vector": None,
                "references": valid_refs,
            }

            # try to get CVE ID
            cve_id = None
            if vuln_obj["id"] and vuln_obj["id"].startswith("CVE-"):
                cve_id = vuln_obj["id"]
            else:
                # check if references contain a CVE link
                cve_id = extract_cve_from_references(vuln_obj["references"])

            # if we found a CVE, query NVD
            if cve_id:
                print(f"Enriching {vuln_obj['id']} (CVE: {cve_id}) from NVD...")
                nvd_info = enrich_with_nvd(cve_id)
                if nvd_info:
                    vuln_obj["severity"] = nvd_info.get("severity")
                    vuln_obj["cvss_score"] = nvd_info.get("cvss_score")
                    vuln_obj["cvss_vector"] = nvd_info.get("cvss_vector")
                    vuln_obj["nvd_description"] = nvd_info.get("nvd_description")
                    vuln_obj["cve_id"] = cve_id  
                    # avoid duplicate references
                    nvd_refs = [{"type": "NVD", "url": url} for url in nvd_info.get("nvd_references", [])]
                    existing_urls = {ref["url"] for ref in vuln_obj["references"]}
                    vuln_obj["references"].extend([ref for ref in nvd_refs if ref["url"] not in existing_urls])
                    epss_info = enrich_with_epss(cve_id)
                    if epss_info:
                        vuln_obj["epss_score"] = epss_info.get("epss_score")
                        vuln_obj["epss_percentile"] = epss_info.get("percentile")
                        print(f"  ✓ Found EPSS: {vuln_obj['epss_score']:.4f} (percentile: {vuln_obj['epss_percentile']:.2f})")
                   
                
                # avoid rate limiting for now (6 seconds = ~10 requests/minute)
                time.sleep(6)

            enriched_vulns.append(vuln_obj)

        return enriched_vulns

    except Exception as e:
        print(f"OSV query failed: {e}")
        return []